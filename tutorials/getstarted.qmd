# 🚀 Get Started with LieGroups.jl

## Introduction

This tutorial introduces both a few basics of [Lie groups](https://en.wikipedia.org/wiki/Lie_group) as well as how to use [LieGroups.jl](https://juliamanifolds.github.io/LieGroups.jl/stable/). The Lie groups we consider are the rotations in the plane,
or [special orthogonal group](../groups/special_orthogonal_group.md) as well as rigid body motions,
or in other words the [special euclidean group](../groups/special_euclidean_group.md).

In a nutshell a Lie group $𝒢$ is a [manifold](https://en.wikipedia.org/wiki/Manifold) $ℳ$ that also is a group with a group operation.

A manifold can informally be described as a set that “locally looks like a Euclidean space”
and has some way to measure angles at every point.
Formally, this yields an inner product that depends (smoothly) on the point one is at.
For Lie groups this will be a bit easier.

A [group](https://en.wikipedia.org/wiki/Group_(mathematics)) means that on the set there also
exists an operation, within this package usually denoted by $∘: 𝒢 × 𝒢 → 𝒢$,
`LieGroups.jl` uses the manifolds defined in [`Manifolds.jl`](https://juliamanifolds.github.io/Manifolds.jl/stable/). For more details on that, see also the [introductory tutorial](https://juliamanifolds.github.io/Manifolds.jl/stable/tutorials/getstarted/) there.
A Lie group is usually written as a tuple $(ℳ,∘)$ with the manifold and the group operation thereon.

For more theoretical background, see for example [HilgertNeeb:2012](@cite), especially their Chapter 9.

## Rotations on the plane $ℝ^2$ and in $ℝ^3$.

This first part considers rotations in the plane. These can be represented by rotation matrices
```math
R_α = \begin{pmatrix} \cos(α)& -\sin(α)\\ \sin(α) & \cos(α) \end{pmatrix},\qquad α ∈ ℝ,
```

where we already represent all possible rotations when restricting $α$ to $[0,2π]$.
Adding two matrices $R_α + R_β$ does not yield a valid rotation matrix again, but we
can have these matrices in mind as being “locally like the real line”, since changing the rotation angle
slightly yields rotation matrices that are “close by” in the sense that they perform nearly the same rotation
when applied to a point $x ∈ ℝ^2$ by computing $R_αx$.
Matrix multiplication $R_β = R_{α_1} R_{α_2}$ does yield a new rotation and also fulfills all other
properties to yield a group operation.
Using trigonometric identities we observe that $R_β = R_{α_1+α_2}$.
Since the angle of rotation is $2π$-periodic, we also see here, that e.g. for small angles around $0$,
this behaves like the real line, but globally it differs, since $R_{α} = R_{α+2π}$



The set of rotation matrices is hence a Lie group and called the [special orthogonal group](../groups/special_orthogonal_group.md) $\mathrm{SO}(2)$. In `LieGroups.jl` we initialise this as

```{julia}
using LieGroups, LinearAlgebra, RecursiveArrayTools
SO2 = SpecialOrthogonalGroup(2)
```

Elements $g, h ∈ \mathrm{SO}(2)$ we generate as

```{julia}
g = [1.0 0.0; 0.0 1.0]
h = 1/sqrt(2) .* [1.0 -1.0; 1.0 1.0]
```

A first thing to do is to use [`is_point`](@ref) to verify they are valid.

```{julia}
(is_point(SO2, g), is_point(SO2, h))
```

The already mentioned group operation as the matrix multiplication, there is also a generic
function available, [`compose`](@ref) as well as its in-place variant [`compose!`](@ref).
The following two yield the same matrix

```{julia}
[ compose(SO2, g, h), g*h ]
```

Furthermore a lot of of functions are “passed down” tp the manifold, which is stored within
the [`LieGroup`](@ref). For example the dimension of the manifold, or the number of degrees of freedom
can be accessed via the ``[`manifold_dimension`](@extref `ManifoldsBase.manifold_dimension-Tuple{AbstractManifold}`)``{=commonmark}

```{julia}
manifold_dimension(SO2)
```

## The Lie algebra, and the Lie group exponential function.

For the following investigations, we consider the special orthogonal group $\mathrm{SO}(3)$,
that is rotations in a 3-dimensional space.
Besides one special rotation in the following code for completeness, a prominent, at first glace
maybe a bit “dull” point on this Lie group is the identity matrix `e`.

```{julia}
SO3 = SpecialOrthogonalGroup(3)
g = [cos(π/3) -sin(π/3) 0.0; sin(π/3) cos(π/3) 0.0; 0.0 0.0 1.0]* [cos(π/4) 0.0 -sin(π/4); 0.0 1.0 0.0; sin(π/4) 0.0 cos(π/4)]
e = Matrix{Float64}(I,3,3)
g
```
The element `g` can be seen as a rotation by $π/3$ in the x-y-plane combined with a rotation by $π/4$ in the x-z plane.

The tangent space $T_e𝒢$ plays a special role and is called the [`LieAlgebra`](@ref) $𝔤$.

Similar to the ``[Riemannian exponential map](@extref `Base.exp-Tuple{AbstractManifold, Any, Any}`)``{=commonmark}
The exponential function $\exp_𝒢: 𝔤 → 𝒢$ maps Lie algebra tangent vectors $X ∈ T_e𝒢$
to a point on the Lie group. This is implemented in [`exp(G::LieGroup, X)`](@ref). Its inverse
is the Lie group logarithmic function [`log(G::LieGroup, g)`](@ref).

```{julia}
X = log(SO3,g)
is_point(LieAlgebra(SO3), X)
```

```{julia}
exp(SO3,X)
```

The term “exponential” has at least three different meanings throughout Lie groups and Riemannian manifolds.
To be precise, we call the just introduced one “exponential function”, since it often agrees with the [exponential](https://en.wikipedia.org/wiki/Exponential_function).

Taking a closed look at `X` we see

```{julia}
X
```

an example that all elements from the Lie algebra are skew symmetric matrices.
This allows for one way to see that we have three degrees of freedom, cf

```{julia}
manifold_dimension(SO3)
```

As the Lie algebra was introduced via a tangent space, we also know that it is a vector space.
To “turn” the `X` into a vector with three elements, we need a basis of the tangent space
to decompose `X` into and “read off” its components.
While in general this can be done using the [bases of a tangent space](https://juliamanifolds.github.io/ManifoldsBase.jl/stable/bases/) from [`ManifoldsBase.jl`](https://juliamanifolds.github.io/ManifoldsBase.jl/stable/),
a very specific one is [`vee(::LieAlgebra, X)`](@ref)

```{julia}
c = vee(LieAlgebra(SO3), X)
```

and its inverse, [`hat(G::LieAlgebra, c)`](@ref)

```{julia}
X_ = hat(LieAlgebra(SO3),c)
```

## Representing tangent vectors

Consider the function of left group composition $λ_g(h) = g∘h$.
Its differential (or push forward) $Dλ_g(e)$ maps from $T_e𝒢$ to $T_g𝒢$
and is a linear bijection between both spaces.
Its adjoint differential (or pullback) $D^*λ_g(e)$ maps back from $T_g𝒢$ to $T_e𝒢$.

This allows to introduce an inner product on all tangent spaces, that smoothly varies with
the base point, we obtain the left-invariant metric

```math
⟨X,Y⟩_g = ⟨D^*λ_g(e)[X],D^*λ_g(e)⟩_e,
```

since it is invariant if you use the differential of the left composition to identify tangent vectors.
We can even “spare” the pullbacks in this definition, when spring tangent vectors as their representants in the Lie algebra.
This is the default in `LieGroups.jl`.

With respect to this metric on the manifold the exponential and logarithmic maps are given by

```math
\exp_g(X) = g ∘ \exp_𝒢(X)
\quad\text{with its inverse}\quad
\log_g(h) = \log_𝒢(g^{-1}∘h)
```

With respect to these geodesics and the representation in the Lie algebra, parallel transport
simplifies to the identity. To still access the Riemannian exponential map with respect to the
metric (compatible to the Levi-Civita connection) on the underlying Riemannian manifold, use
`exp(base_manifold(G), g, X)`.

As an example, we compute

```{julia}
h = exp(SO3, g, X)
```
and its inverse is returning `X` as well.
```{julia}
log(SO3, g, h)
```

## The Special Euclidean group $\mathrm{SE}(3)$ of rigid body motions

There are two further ingredients this tutorial needs to get towards rigid body motions.

### Group actions

For a group like $\mathrm{SO}(3)$ an action describes how points $g ∈ 𝒢$ can act on
points from a Riemannian manifold $p ∈ ℳ$ – in short an action of a certain [`AbstractGroupActionType`](@ref)
”combines“ $p$ and $g$ into a new element $q = σ_g(p)$.
In the example of $𝒢=\mathrm{SO}(3)$ and $ℳ=ℝ^3$ the action is (just) the application of the
rotation or the matrix-vector multiplication $σ_g(p)=gp$.
A special case is, when $ℳ$ itself is also a Lie group.
In the example this is the case, since together with vector addition $p+q$ we get the [`TranslationGroup`](@ref) $T(3) = (ℝ^3, +)$
Depending on how the concatenation of two types, the [`AbstractLeftGroupActionType`](@ref) like the one here
and a [`AbstractRightGroupActionType`](@ref).

```{julia}
T3 = TranslationGroup(3)
```
### Products and semidirect products of Lie groups

Similar to [product manifolds](https://juliamanifolds.github.io/ManifoldsBase.jl/stable/metamanifolds/#ProductManifold)
(direct) [product Lie groups](../groups/product_group.md) are formed the same way. For two Lie groups
$𝒢 = 𝒢_1 × 𝒢_2$ is the product of the two manifolds together with the component wise application of the group operations:
the first group operation (of $𝒢_1$) to the first component and that of $𝒢_2$ to the second.

Instead of the component wise or “not interacting” variant of the (direct) product Lie groups,
for the [semidirect product Lie groups](../groups/semidirect_product_group.md) $𝒢 = 𝒢_1 ⋉ 𝒢_2$
we also require an action of how $𝒢_1$ acts on $𝒢_2$.
Semidirect here means that the first component of $𝒢$ is the same as for the direct product,
but before applying the second group operation on $𝒢_2$ one of the elements is “acted upon”
from an element of $𝒢_1$. The group operation reads for $(g_1,g_2), (h_1,h_2) ∈ 𝒢$

```math
(g_1,g_2) ∘ (h_1,h_2) := (g_1 ⋆ h_1, σ_{h_1}(g_2) ⋄ h_2).
```

### Rigid body motions

We obtain the [special Euclidean group](../groups/special_euclidean_group.md)
$\mathrm{SE}(3) = \mathrm{SO}(3) ⋉ T(3)`` where the group action is the one discussed as an example before.

```{julia}
SE3 = SpecialEuclideanGroup(3)
```

which we could also generate with `SO3` and `T3` from before as

```{julia}
SO3 ⋉ T3
```

This call employs the [`default_left_action`](@ref)`(SO3,T3)` to determine the action
for the semidirect product Lie group. This is defined whenever for two Lie groups, their (left)
action is clear, because there exists a reasonable default. Otherwise the full form

```{julia}
LeftSemidirectProductLieGroup(SO3, T3, LeftGroupOperationAction())
```

is necessary. Here, the first `Left` for the semidirect product refers to the fact that
the left group acts on the right one before the right group operation is performed.
[`LeftGroupOperationAction`](@ref) refers to that the group operation – left multiplication with a matrix – is applied here.

For this case, any point $\mathrm{SE}(3)$ is a tuple of a rotation matrix and a vector.
We model this using [RecursiveArrayTools.jl](https://docs.sciml.ai/RecursiveArrayTools/stable/),
namely its `ArrayPartition`.
For example with the rotation matrix `g` from before we have

```{julia}
g1 = ArrayPartition(g, [1.0, 0.0, 2.0])
```

and for a pure translation we can reuse `e` as in

```{julia}
h1 = ArrayPartition(e, [0.0, 3.0, 0.0])
```

and we can summarize a few operations from before: both are valid points on `SE3`

```{julia}
(is_point(SE3, g1), is_point(SE3, h1))
```

we can perform the group operation

```{julia}
gh1 = compose(SE3, g1, h1)
```

apply the Lie group exponential

```{julia}
Y = log(SE3, gh1)
```

and look at the manifold dimension, it is the sum of the single ones

```{julia}
manifold_dimension(SE3)
```

and its coordinates as

```{julia}
vee(LieAlgebra(SE3), gh1)
```

which actually is component wise again, the first 3 values refer to the rotation part,
the second three to the translation part.

## Technical details

This tutorial is cached. It was last run on the following package versions.

```{julia}
#| code-fold: true
#| echo: false
using Pkg
Pkg.status()
```
```{julia}
#| code-fold: true
#| echo: false
#| output: asis
using Dates
println("This tutorial was last rendered $(Dates.format(now(), "U d, Y, H:M:S")).");
```

## Literature

````{=commonmark}
```@bibliography
Pages = ["getstarted.md"]
Canonical=false
```
````